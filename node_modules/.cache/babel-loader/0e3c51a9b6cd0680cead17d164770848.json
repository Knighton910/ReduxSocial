{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = [{\n  id: '1',\n  title: '1st Post',\n  content: 'Excited!!'\n}, {\n  id: '2',\n  title: '2nd Post',\n  content: 'OMG not a good day'\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/lordknighton/Desktop/Now Folder/redux-essentials-example-app/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","initialState","id","title","content","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","postUpdated","existingPost","find","post","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,UAAlB;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CADmB,EAEnB;AAAEF,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,UAAlB;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CAFmB,CAArB;AAKA,MAAMC,UAAU,GAAGN,WAAW,CAAC;AAC7BO,EAAAA,IAAI,EAAE,OADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHQ;;AAITC,MAAAA,OAAO,CAACX,KAAD,EAAQC,OAAR,EAAiB;AACtB,eAAO;AACLS,UAAAA,OAAO,EAAE;AACPX,YAAAA,EAAE,EAAEF,MAAM,EADH;AAEPG,YAAAA,KAFO;AAGPC,YAAAA;AAHO;AADJ,SAAP;AAOD;;AAZQ,KADH;;AAeRW,IAAAA,WAAW,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAM;AAAET,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaC,QAAAA;AAAb,UAAyBO,MAAM,CAACE,OAAtC;AACA,YAAMG,YAAY,GAAGN,KAAK,CAACO,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAAChB,EAAL,KAAYA,EAA/B,CAArB;;AAEA,UAAGc,YAAH,EAAiB;AACfA,QAAAA,YAAY,CAACb,KAAb,GAAqBA,KAArB;AACAa,QAAAA,YAAY,CAACZ,OAAb,GAAuBA,OAAvB;AACD;AACF;;AAvBO;AAHmB,CAAD,CAA9B;AA8BA,OAAO,MAAM;AAAEI,EAAAA,SAAF;AAAaO,EAAAA;AAAb,IAA6BV,UAAU,CAACc,OAA9C;AAEP,eAAed,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\n\nconst initialState = [\n  { id: '1', title: '1st Post', content: 'Excited!!' },\n  { id: '2', title: '2nd Post', content: 'OMG not a good day' }\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload)\n      },\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        }\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.find(post => post.id === id)\n\n      if(existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    }\n  }\n})\n\nexport const { postAdded, postUpdated } = postsSlice.actions\n\nexport default postsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}